import sys
import argparse
import pathlib
import json
import os
import shutil
import angr

from utils.ida_plugin import ida_preprocess
from utils.bin_factory import BinFactory

CONFIG = pathlib.Path(__file__).parent / "config.json"

class EmTaintAnalyzer():
    def __init__(self, firmware_name: str, 
                    binary_filepath: str):

        self.binary_filepath = os.path.abspath(binary_filepath)
        self.firmware_name = firmware_name
        self.binary_name = os.path.basename(self.binary_filepath)

        # Load configures
        try:
            with open(CONFIG, "r") as f:
                self.config = json.load(f)
                print("^^^^^^^^^^^ Current Config ^^^^^^^^^^^")
                print(json.dumps(self.config, indent=4))
                print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
        except Exception as e:
            print("Error: {}".format(e))
            sys.exit()
        
        # init data storage folder used by analyzer
        self.data_home_dir = self.config["data"]["data_home"]
        # make following path as absolute path
        self.firmware_dir = os.path.abspath(os.path.join(self.data_home_dir, self.firmware_name))
        self.binary_dir = os.path.abspath(os.path.join(self.firmware_dir, self.binary_name))
        self.ida_preprocess_dir = os.path.abspath(os.path.join(self.binary_dir, "ida_preprocess"))
        self.result_dir = os.path.abspath(os.path.join(self.binary_dir, "result"))

        self.init_data_storage()

    def init_data_storage(self):
        if not os.path.exists(self.ida_preprocess_dir):
            os.makedirs(self.ida_preprocess_dir)
            print("Create ida processed dir: {}".format(self.ida_preprocess_dir))
        
        # force to reanalyze, delete the old result
        if os.path.exists(self.result_dir):
            shutil.rmtree(self.result_dir)
            print("Delete old analyze target result dir: {}".format(self.result_dir))
        os.makedirs(self.result_dir)


    def run(self):
        """
        Running the `EmTaintAnalyzer`
        """
        ida_preprocess(self.binary_filepath, self.ida_preprocess_dir, self.config)

        proj = angr.Project(self.binary_filepath)
        bin_factory = BinFactory(proj, self.ida_preprocess_dir)
        

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Firmware Binary Static Analysis Tool.")
    parser.add_argument("-f", "--firmware_name", help="the firmware name, used for binary info generated by Ida Pro")
    parser.add_argument("-b", "--binary_file", help="single binary file path in firmware")
    # parser.add_argument("-i", "--icall_check", default=False, help="icall check?", action="store_true")
    # parser.add_argument("-t", "--taint_check", default=False, help="taint check?", action="store_true")
    # parser.add_argument("-s", "--switch_check", default=False, help="check and resolve the switch jmp", action="store_true")
    
    # parser.add_argument("-v", "--firmware_version", help="the firmware version, used for different binary path")
    # parser.add_argument("--resolve_icall", default=1, type=int, help="If reolve indirect call while doing taint analysis")
    # parser.add_argument("-a", "--alias_check", default=False, help="find alias", action="store_true")
    # parser.add_argument("--infer_source", default=False, help="Infer taint sources to do taint analysis", action="store_true")
    # parser.add_argument("--debug", default=False, help="check and resolve the switch jmp", action="store_true")
    # parser.add_argument("--load_ida_bytes", default=False, help="whether load binary bytes from IDA Pro", action="store_true")
    args = parser.parse_args()

    if not args.binary_file or not args.firmware_name:
        parser.print_help()
        sys.exit()

    analyzer = EmTaintAnalyzer(args.firmware_name, args.binary_file)
    analyzer.run()
